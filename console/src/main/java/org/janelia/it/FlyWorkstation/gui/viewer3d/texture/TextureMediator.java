package org.janelia.it.FlyWorkstation.gui.viewer3d.texture;

import org.janelia.it.FlyWorkstation.gui.viewer3d.VolumeDataAcceptor;

import javax.media.opengl.GL2;
import java.nio.IntBuffer;

/**
 * Created with IntelliJ IDEA.
 * User: fosterl
 * Date: 1/17/13
 * Time: 2:48 PM
 *
 * This handles interfacing with OpenGL / JOGL for matters regarding textures.  One such mediator represents information
 * regarding a single texture.
 */
public class TextureMediator {
    public static int SIGNAL_TEXTURE_OFFSET = 0;
    public static int MASK_TEXTURE_OFFSET = 1;

    private static int s_textureCount = 0;  // Optional: an assumed sequence of textures is made.

    private int textureName;
    private int textureSymbolicId; // This is an ID like GL.GL_TEXTURE0.
    private int textureOffset; // This will be 0, 1, ...

    private TextureDataI textureData;

    private static final int INTERPOLATION_METHOD =
            GL2.GL_LINEAR; // blending across voxel edges
    // GL2.GL_NEAREST; // discrete cube shaped voxels

    public static int[] genTextureIds( GL2 gl, int count ) {
        int[] rtnVal = new int[ count ];
        gl.glGenTextures( count, rtnVal, 0 );
        return rtnVal;
    }

    public TextureMediator() {
        // No initialization.
    }

    public TextureMediator( int textureId ) {
        init( textureId, s_textureCount ++ );
    }

    /**
     * Initialize a mediator.  Assumptions that can be made about various identifiers will be made here.
     *
     * @param textureId as generated by @See #genTextureIds
     * @param offset 0, 1, ...
     */
    public void init( int textureId, int offset ) {
        this.textureName = textureId;
        this.textureOffset = offset;
        textureSymbolicId = GL2.GL_TEXTURE0 + offset;
    }

    public void uploadTexture( GL2 gl ) {

        IntBuffer data = IntBuffer.wrap( textureData.getTextureData() );
        if ( data != null ) {
            gl.glActiveTexture( textureSymbolicId );
            gl.glEnable( GL2.GL_TEXTURE_3D );

            gl.glBindTexture( GL2.GL_TEXTURE_3D, textureName );
            gl.glTexEnvi(GL2.GL_TEXTURE_ENV, GL2.GL_TEXTURE_ENV_MODE, GL2.GL_REPLACE);

            gl.glTexImage3D(GL2.GL_TEXTURE_3D,
                    0, // mipmap level
                    getInternalFormat(), // as stored INTO graphics hardware, w/ srgb info (GLint internal format)
                    textureData.getSx(), // width
                    textureData.getSy(), // height
                    textureData.getSz(), // depth
                    0, // border
                    getVoxelComponentOrder(), // voxel component order (GLenum format)
                    getVoxelComponentType(), // voxel component type=packed RGBA values(GLenum type)
                    data.rewind()
            );
        }
    }

    public int getTextureOffset() {
        return textureOffset;
    }

    public double[] textureCoordinateFromXyz( double[] xyz ) {
        double[] tc = {xyz[0], xyz[1], xyz[2]}; // micrometers, origin at center
        int[] voxels = { textureData.getSx(), textureData.getSy(), textureData.getSz() };
        Double[] volumeMicrometers = textureData.getVolumeMicrometers();
        Double[] voxelMicrometers = textureData.getVoxelMicrometers();
        for (int i =0; i < 3; ++i) {
            // Move origin to upper left corner
            tc[i] += volumeMicrometers[i] / 2.0; // micrometers, origin at corner
            // Rescale from micrometers to voxels
            tc[i] /= voxelMicrometers[i]; // voxels, origin at corner
            // Rescale from voxels to texture units (range 0-1)
            tc[i] /= voxels[i]; // texture units
        }

        return tc;
    }

    public void setTextureCoordinates( GL2 gl, double tX, double tY, double tZ ) {
        gl.glMultiTexCoord3d(textureSymbolicId, tX, tY, tZ);
    }

    public Double[] getVolumeMicrometers() {
        return textureData.getVolumeMicrometers();
    }

    public Double[] getVoxelMicrometers() {
        return textureData.getVoxelMicrometers();
    }

    public void setupTexture( GL2 gl ) {
        gl.glActiveTexture( textureSymbolicId );
        gl.glBindTexture( GL2.GL_TEXTURE_3D, textureName );
        gl.glTexParameteri(GL2.GL_TEXTURE_3D, GL2.GL_TEXTURE_MIN_FILTER, INTERPOLATION_METHOD);
        gl.glTexParameteri(GL2.GL_TEXTURE_3D, GL2.GL_TEXTURE_MAG_FILTER, INTERPOLATION_METHOD);
        gl.glTexParameteri(GL2.GL_TEXTURE_3D, GL2.GL_TEXTURE_WRAP_R, GL2.GL_CLAMP_TO_BORDER);
        gl.glTexParameteri(GL2.GL_TEXTURE_3D, GL2.GL_TEXTURE_WRAP_S, GL2.GL_CLAMP_TO_BORDER);
        gl.glTexParameteri(GL2.GL_TEXTURE_3D, GL2.GL_TEXTURE_WRAP_T, GL2.GL_CLAMP_TO_BORDER);
    }

    public void setTextureData(TextureDataI textureData) {
        this.textureData = textureData;
    }

    //--------------------------- Helpers for glTexImage3D
    private int getVoxelComponentType() {
        int rtnVal = GL2.GL_UNSIGNED_INT_8_8_8_8_REV;
        if ( textureData.getPixelByteCount()  == 1 ) {
            rtnVal = GL2.GL_UNSIGNED_BYTE;
        }

        return rtnVal;
        // BLACK SCREEN. GL2.GL_UNSIGNED_BYTE_3_3_2,  // BLACK SCREEN for 143/266
        // GL2.GL_UNSIGNED_SHORT_4_4_4_4_REV, // TWO-COLOR SCREEN for 143/266
        // GL2.GL_UNSIGNED_SHORT_5_5_5_1, // 3-Color Screen for 143/266
        // GL2.GL_UNSIGNED_SHORT_1_5_5_5_REV, // Different 3-Color Screen for 143/266
        // GL2.GL_UNSIGNED_SHORT_5_6_5, // BLACK SCREEN for 143/266
        // GL2.GL_UNSIGNED_SHORT_5_6_5_REV, // BLACK SCREEN for 143/266
        // GL2.GL_BYTE, // YBD for 143/266
        // GL2.GL_BYTE, // YBD for 143/266
        // GL2.GL_UNSIGNED_BYTE, // Grey Neurons for 143/266
        // GL2.GL_UNSIGNED_SHORT, // Stack Trace for 143/266
    }

    private int getInternalFormat() {
        int internalFormat = GL2.GL_RGBA;
        if (textureData.getColorSpace() == VolumeDataAcceptor.TextureColorSpace.COLOR_SPACE_SRGB)
            internalFormat = GL2.GL_SRGB8_ALPHA8;
        if (textureData.getPixelByteCount() == 1)
            internalFormat = GL2.GL_LUMINANCE;
        return internalFormat;
    }

    private int getVoxelComponentOrder() {
        int rtnVal = GL2.GL_BGRA;
        return rtnVal;
    }
    //--------------------------- End: Helpers for glTexImage3D

}
